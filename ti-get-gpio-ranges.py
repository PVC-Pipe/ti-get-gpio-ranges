from argparse import ArgumentParser

def get_gpio_ranges(filename: str) -> None:
    with open(filename, "r", newline="") as file:
        range_strings = {}

        num_pins = 0
        prev_offset = -2
        in_pmx = False

        for line in file:
            if "IOPAD" in line:
                domain = "mcu" if "MCU_IOPAD" in line else "main"
                gpio_info = line[line.index("GPIO") + len("GPIO"):line.index("*/") - 1].split("_")
                domain_num = int(gpio_info[0])
                gpio_num = int(gpio_info[1])
                offset = int(int(line[line.index("(") + len("("):line.index(",")], 16) / 4)

                domain_name = f"{domain}_gpio{domain_num}"
                pmx_name = f"{domain}_pmx0"

                if offset > (prev_offset + 1):
                    if range_strings.get(domain_name) != None:
                        range_strings[domain_name] += f" {num_pins}>,\n"
                        num_pins = 0
                    else:
                        range_strings[domain_name] = ""

                    range_strings[domain_name] += f"<&{pmx_name} {gpio_num} {offset}"

                num_pins += 1
                prev_offset = offset
                in_pmx = True

            elif in_pmx:
                range_strings[domain_name] += f" {num_pins}>;\n"
                num_pins = 0
                prev_offset = -2
                in_pmx = False

        for domain_name, range_string in sorted(range_strings.items()):
            print(f"# {domain_name}")
            print(range_string)

if __name__ == "__main__":
    parser = ArgumentParser(
        prog="ti-get-gpio-ranges.py",
        description="Parses a dtsi generated by Sysconfig containing all of the enableable GPIO"
    )
    parser.add_argument("filename", help="dtsi to parse")
    args = parser.parse_args()
    get_gpio_ranges(args.filename)

